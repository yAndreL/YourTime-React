// Este arquivo precisa ser configurado com seu servidor Express ou similar
// Para fins deste exemplo, voc√™ pode criar um servidor Express separado ou usar middleware no Vite

import express from 'express';
import { inserirRegistro, testarConexao } from './database.js';
import { testarConexaoSupabase, inserirRegistroSupabase } from './supabase-api.js';

const router = express.Router();
// Flag para alternar entre conex√£o direta PostgreSQL e Supabase REST API
let usarSupabaseRest = false;

// Rota para verificar a conex√£o
router.get('/teste-conexao', async (req, res) => {
  console.log('üîç Recebida solicita√ß√£o de teste de conex√£o');
  console.log('[DEBUG] Headers recebidos:', req.headers);
  console.log('[DEBUG] Query params:', req.query);
  
  // Verifica se deve usar a API REST
  if (req.query.useRestApi === 'true') {
    usarSupabaseRest = true;
    console.log('üîÄ Alterando para modo API REST Supabase');
  } else if (req.query.useRestApi === 'false') {
    usarSupabaseRest = false;
    console.log('üîÄ Alterando para modo PostgreSQL direto');
  }
  
  try {
    if (usarSupabaseRest) {
      console.log('üåê Testando conex√£o via Supabase REST API...');
      const resultado = await testarConexaoSupabase();
      console.log('üìä Resultado do teste via REST API:', resultado);
      
      if (resultado.sucesso) {
        console.log('‚úÖ Conex√£o REST bem-sucedida');
        console.log('[DEBUG] Enviando resposta JSON com status 200:', resultado);
        res.setHeader('Content-Type', 'application/json');
        res.status(200).json(resultado);
      } else {
        console.log('‚ùå Falha na conex√£o REST');
        res.status(500).json(resultado);
      }
    } else {
      console.log('üåê Testando conex√£o direta com o banco de dados PostgreSQL...');
      const resultado = await testarConexao();
      console.log('üìä Resultado do teste de conex√£o PostgreSQL:', resultado);
      
      if (resultado.sucesso) {
        console.log('‚úÖ Conex√£o PostgreSQL bem-sucedida');
        console.log('[DEBUG] Enviando resposta JSON com status 200:', resultado);
        res.setHeader('Content-Type', 'application/json');
        res.status(200).json(resultado);
      } else {
        console.log('‚ùå Falha na conex√£o PostgreSQL. Tentando REST API...');
        
        // Tentar automaticamente a alternativa REST API
        try {
          const resultadoRest = await testarConexaoSupabase();
          if (resultadoRest.sucesso) {
            console.log('‚úÖ Conex√£o via REST API bem-sucedida como fallback');
            usarSupabaseRest = true; // Ativar modo REST API
            resultadoRest.mensagem = 'Conex√£o PostgreSQL falhou, mas API REST funcionou! Modo REST ativado.';
            resultadoRest.postgresError = resultado.mensagem;
            console.log('[DEBUG] Enviando resposta JSON com status 200:', resultadoRest);
            res.setHeader('Content-Type', 'application/json');
            res.status(200).json(resultadoRest);
          } else {
            console.log('‚ùå Ambos os m√©todos falharam');
            res.status(500).json({
              ...resultado,
              restApiTambemFalhou: true,
              mensagem: `PostgreSQL: ${resultado.mensagem}. REST API: ${resultadoRest.mensagem}`
            });
          }
        } catch (restError) {
          console.error('üí• Erro durante o teste de conex√£o REST:', restError);
          res.status(500).json(resultado); // Retorna o erro PostgreSQL original
        }
      }
    }
  } catch (error) {
    console.error('üí• Erro durante o teste de conex√£o:', error);
    res.status(500).json({
      sucesso: false,
      mensagem: `Erro interno: ${error.message}`
    });
  }
});

// Rota para inserir um registro
router.post('/verificar-conexao', async (req, res) => {
  console.log('üìù Recebida solicita√ß√£o para inserir registro');
  console.log('[DEBUG] Headers recebidos:', req.headers);
  console.log('[DEBUG] Content-Type:', req.headers['content-type']);
  console.log('[DEBUG] Body raw:', req.body);
  
  try {
    const dados = req.body;
    console.log('üì¶ Dados recebidos:', dados);
    
    if (!dados.dia || !dados.hora_entrada || !dados.hora_saida || !dados.pausa) {
      console.log('‚ö†Ô∏è Dados incompletos');
      return res.status(400).json({
        sucesso: false,
        mensagem: 'Dados incompletos. Por favor, preencha todos os campos obrigat√≥rios.'
      });
    }
    
    if (usarSupabaseRest) {
      // Usar REST API do Supabase
      console.log('üíæ Tentando inserir registro via REST API...');
      const resultado = await inserirRegistroSupabase(dados);
      console.log('üìä Resultado da inser√ß√£o REST API:', resultado);
      
      if (resultado.sucesso) {
        console.log('‚úÖ Registro inserido com sucesso via REST API');
        console.log('[DEBUG] Enviando resposta JSON com status 201:', resultado);
        res.setHeader('Content-Type', 'application/json');
        res.status(201).json(resultado);
      } else {
        console.log('‚ùå Falha ao inserir registro via REST API');
        res.status(500).json(resultado);
      }
    } else {
      // Usar conex√£o direta PostgreSQL
      console.log('üíæ Tentando inserir registro no banco de dados PostgreSQL...');
      const resultado = await inserirRegistro(dados);
      console.log('üìä Resultado da inser√ß√£o PostgreSQL:', resultado);
      
      if (resultado.sucesso) {
        console.log('‚úÖ Registro inserido com sucesso via PostgreSQL');
        console.log('[DEBUG] Enviando resposta JSON com status 201:', resultado);
        res.setHeader('Content-Type', 'application/json');
        res.status(201).json(resultado);
      } else {
        console.log('‚ùå Falha ao inserir registro via PostgreSQL. Tentando REST API...');
        
        try {
          const resultadoRest = await inserirRegistroSupabase(dados);
          if (resultadoRest.sucesso) {
            console.log('‚úÖ Inser√ß√£o via REST API bem-sucedida como fallback');
            usarSupabaseRest = true; // Ativar modo REST API
            resultadoRest.mensagem = 'Inser√ß√£o PostgreSQL falhou, mas API REST funcionou! Modo REST ativado.';
            resultadoRest.postgresError = resultado.mensagem;
            console.log('[DEBUG] Enviando resposta JSON com status 201:', resultadoRest);
            res.setHeader('Content-Type', 'application/json');
            res.status(201).json(resultadoRest);
          } else {
            console.log('‚ùå Ambos os m√©todos de inser√ß√£o falharam');
            res.status(500).json({
              ...resultado,
              restApiTambemFalhou: true,
              mensagem: `PostgreSQL: ${resultado.mensagem}. REST API: ${resultadoRest.mensagem}`
            });
          }
        } catch (restError) {
          console.error('üí• Erro durante a inser√ß√£o via REST API:', restError);
          res.status(500).json(resultado); // Retorna o erro PostgreSQL original
        }
      }
    }
  } catch (error) {
    console.error('üí• Erro durante a inser√ß√£o do registro:', error);
    res.status(500).json({
      sucesso: false,
      mensagem: `Erro interno: ${error.message}`
    });
  }
});

// Rota para diagn√≥stico de conex√£o
router.get('/diagnostico', async (req, res) => {
  console.log('üîç Recebida solicita√ß√£o de diagn√≥stico na rota /api/diagnostico');
  console.log('[DEBUG] Headers recebidos:', req.headers);
  console.log('[DEBUG] Query params:', req.query);
  console.log('[DEBUG] URL completa:', req.originalUrl);
  console.log('[DEBUG] M√©todo:', req.method);
  const action = req.query.action;
  console.log('[DEBUG] Action:', action);
  
  if (action === 'check-server') {
    try {
      console.log('[DEBUG] Processando diagn√≥stico check-server');
      // Informa√ß√µes do servidor e conex√£o
      const info = {
        serverInfo: {
          timestamp: new Date().toISOString(),
          node: process.version,
          platform: process.platform,
          hostname: require('os').hostname()
        },
        conexaoInfo: {
          host: 'db.gkikgvkapnyfhpwhngxw.supabase.co',
          port: 5432,
          database: 'postgres',
          user: 'postgres',
          useSSL: true
        }
      };
      
      // Teste b√°sico de conex√£o
      try {
        const resultadoConexao = await testarConexao();
        info.conexaoTeste = resultadoConexao;
      } catch (error) {
        info.conexaoTeste = { sucesso: false, erro: error.message };
      }
      
      // Tentar DNS lookup usando m√≥dulos dispon√≠veis
      try {
        const { lookup } = require('dns');
        const { promisify } = require('util');
        const lookupAsync = promisify(lookup);
        
        const dnsResult = await lookupAsync('db.gkikgvkapnyfhpwhngxw.supabase.co');
        info.dnsLookup = {
          sucesso: true,
          address: dnsResult.address,
          family: dnsResult.family
        };
      } catch (error) {
        info.dnsLookup = {
          sucesso: false,
          erro: error.message
        };
      }
      
      console.log('[DEBUG] Enviando resposta JSON com status 200');
      // Sanitizar os dados antes de enviar
      const safeInfo = JSON.parse(JSON.stringify(info));
      console.log('Dados sanitizados:', typeof safeInfo);
      
      // Garantir que estamos enviando JSON adequadamente
      res.setHeader('Content-Type', 'application/json');
      res.status(200).json(safeInfo);
    } catch (error) {
      res.status(500).json({
        sucesso: false,
        mensagem: `Erro no diagn√≥stico: ${error.message}`
      });
    }
  } else {
    res.status(400).json({
      sucesso: false,
      mensagem: 'A√ß√£o de diagn√≥stico n√£o especificada ou inv√°lida'
    });
  }
});

// Certificando-se de exportar corretamente
const apiRoutes = router;
export default apiRoutes;
